// Commit: "Create Employee class with properties and methods"
class Employee {
    constructor(name, salary, position, department) {
        this.name = name;         // Employee's name
        this.salary = salary;     // Employee's salary
        this.position = position; // Employee's position
        this.department = department; // Employee's department
    }

    // Method to get employee details
    getDetails() {
        return `${this.name}, Position: ${this.position}, Salary: ${this.salary}`;
    }
}

// Commit: "Create Department class to manage employees and calculate salary"
class Department {
    constructor(name) {
        this.name = name;                          // Department's name
        this.employees = [];                       // Array to store employees
    }

    // Method to add an employee to the department
    addEmployee(employee) {
        this.employees.push(employee);
    }

    // Method to calculate total salary of employees in the department
    getDepartmentSalary() {
        return this.employees.reduce((total, employee) => total + employee.salary, 0);
    }

    // Commit: "Handle bonuses in the department salary calculation"
    // Method to calculate total salary including bonuses for managers
    calculateTotalSalaryWithBonus() {
        return this.employees.reduce((total, employee) => {
            if (employee instanceof Manager) {
                return total + employee.salary + employee.bonus; // Include manager's bonus
            }
            return total + employee.salary; // Regular employee salary
        }, 0);
    }
}

// Commit: "Create Manager class with inheritance from Employee"
class Manager extends Employee {
    constructor(name, salary, position, department, bonus) {
        super(name, salary, position, department); // Call parent constructor
        this.bonus = bonus; // Manager's bonus
    }

    // Override the getDetails() method to include bonus
    getDetails() {
        return `${super.getDetails()}, Bonus: ${this.bonus}`;
    }
}
